import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { subscriptionGuard } from '@/lib/auth/subscription-guard'

export async function POST(request: NextRequest) {
  try {
    const { commandmentId, feature } = await request.json()

    const supabase = await createClient()
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // Get user's subscription tier
    const userTier = await subscriptionGuard.getUserSubscriptionTier(user.id)

    // Check access based on request type
    let hasAccess = false
    let accessType = ''
    let upgradeRequired = false
    let suggestedTiers: any[] = []

    if (commandmentId) {
      hasAccess = await subscriptionGuard.hasCommandmentAccess(user.id, commandmentId)
      accessType = `commandment_${commandmentId}`
      
      if (!hasAccess) {
        const suggestions = await subscriptionGuard.getUpgradeSuggestions(user.id)
        suggestedTiers = suggestions.suggestedTiers.filter(tier => 
          tier.commandmentAccess.includes(commandmentId)
        )
        upgradeRequired = true
      }
    }

    if (feature) {
      hasAccess = await subscriptionGuard.hasFeatureAccess(user.id, feature)
      accessType = `feature_${feature}`
      
      if (!hasAccess) {
        const suggestions = await subscriptionGuard.getUpgradeSuggestions(user.id, feature)
        suggestedTiers = suggestions.suggestedTiers
        upgradeRequired = true
      }
    }

    // Log access attempt
    await subscriptionGuard.logFeatureAccess(user.id, accessType, hasAccess)

    // Check AI interaction limits if relevant
    let aiLimitInfo = null
    if (feature === 'ai_interactions' || feature === 'mentoring') {
      aiLimitInfo = await subscriptionGuard.checkAIInteractionLimit(user.id)
    }

    const response = {
      hasAccess,
      userTier: {
        id: userTier.id,
        name: userTier.name,
        level: userTier.level
      },
      upgradeRequired,
      suggestedTiers: suggestedTiers.map(tier => ({
        id: tier.id,
        name: tier.name,
        level: tier.level,
        features: tier.features
      })),
      aiLimitInfo,
      accessCheckedAt: new Date().toISOString()
    }

    return NextResponse.json(response)
  } catch (error) {
    console.error('Error checking workshop access:', error)
    return NextResponse.json(
      { error: 'Failed to check access' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // Get user's full subscription status
    const userTier = await subscriptionGuard.getUserSubscriptionTier(user.id)
    const aiLimitInfo = await subscriptionGuard.checkAIInteractionLimit(user.id)
    const featureComparison = subscriptionGuard.getFeatureComparison()

    return NextResponse.json({
      userTier,
      aiLimitInfo,
      featureComparison,
      accessibleCommandments: userTier.commandmentAccess,
      accessibleFeatures: userTier.features
    })
  } catch (error) {
    console.error('Error getting subscription status:', error)
    return NextResponse.json(
      { error: 'Failed to get subscription status' },
      { status: 500 }
    )
  }
}