import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { cancelSubscription } from '@/lib/stripe/server'

export async function POST(request: NextRequest) {
  try {
    const { reason, cancel_immediately = false } = await request.json()
    
    const supabase = await createClient()
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // Get user's subscription
    const { data: subscription, error: subError } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', user.id)
      .eq('status', 'active')
      .maybeSingle()

    if (subError) {
      console.error('Error fetching subscription:', subError)
      return NextResponse.json(
        { error: 'Failed to fetch subscription' },
        { status: 500 }
      )
    }

    if (!subscription) {
      return NextResponse.json(
        { error: 'No active subscription found' },
        { status: 404 }
      )
    }

    // Cancel subscription in Stripe
    const canceledSubscription = await cancelSubscription({
      subscriptionId: subscription.stripe_subscription_id,
      cancelImmediately: cancel_immediately,
      cancellationReason: reason
    })

    // Update subscription in database
    const updateData: any = {
      cancel_at_period_end: !cancel_immediately,
      updated_at: new Date().toISOString()
    }

    if (cancel_immediately) {
      updateData.status = 'canceled'
      updateData.canceled_at = new Date().toISOString()
    }

    if (reason) {
      updateData.cancellation_reason = reason
    }

    const { error: updateError } = await supabase
      .from('subscriptions')
      .update(updateData)
      .eq('id', subscription.id)

    if (updateError) {
      console.error('Error updating subscription:', updateError)
      // Don't fail the request if database update fails
    }

    // Create notification for user
    await supabase
      .from('notifications')
      .insert({
        user_id: user.id,
        type: 'subscription_cancelled',
        title: cancel_immediately ? 'Abonnement gek端ndigt' : 'K端ndigung geplant',
        message: cancel_immediately 
          ? 'Ihr Abonnement wurde sofort gek端ndigt.'
          : `Ihr Abonnement wird am ${new Date(canceledSubscription.current_period_end * 1000).toLocaleDateString('de-DE')} gek端ndigt.`,
        priority: 'normal'
      })

    return NextResponse.json({ 
      success: true, 
      canceled_immediately: cancel_immediately,
      current_period_end: canceledSubscription.current_period_end 
    })
  } catch (error) {
    console.error('Error canceling subscription:', error)
    return NextResponse.json(
      { error: 'Failed to cancel subscription' },
      { status: 500 }
    )
  }
}