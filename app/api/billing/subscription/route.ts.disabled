import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { stripe } from '@/lib/stripe/server'

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    const { data: { user }, error: userError } = await supabase.auth.getUser()

    if (userError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // Get user's subscription from database
    const { data: subscription, error: subError } = await supabase
      .from('subscriptions')
      .select(`
        *,
        subscription_plans(name, price_monthly, price_yearly)
      `)
      .eq('user_id', user.id)
      .eq('status', 'active')
      .maybeSingle()

    if (subError) {
      console.error('Error fetching subscription:', subError)
      return NextResponse.json(
        { error: 'Failed to fetch subscription' },
        { status: 500 }
      )
    }

    if (!subscription) {
      return NextResponse.json({ subscription: null })
    }

    // Get additional details from Stripe if needed
    let stripeSubscription = null
    if (subscription.stripe_subscription_id) {
      try {
        stripeSubscription = await stripe.subscriptions.retrieve(subscription.stripe_subscription_id)
      } catch (error) {
        console.error('Error fetching Stripe subscription:', error)
      }
    }

    // Format response
    const response = {
      id: subscription.id,
      status: subscription.status,
      plan_name: subscription.subscription_plans?.name || 'Unknown Plan',
      current_period_start: subscription.current_period_start,
      current_period_end: subscription.current_period_end,
      cancel_at_period_end: subscription.cancel_at_period_end,
      trial_end: subscription.trial_end,
      amount: subscription.billing_cycle === 'yearly' 
        ? subscription.subscription_plans?.price_yearly || 0
        : subscription.subscription_plans?.price_monthly || 0,
      currency: 'EUR',
      interval: subscription.billing_cycle === 'yearly' ? 'year' : 'month',
      stripe_customer_id: subscription.stripe_customer_id,
    }

    return NextResponse.json(response)
  } catch (error) {
    console.error('Error in subscription API:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}